#!/bin/bash

function _getLatestDumpSql() {
    LATEST_DUMP="$(aws s3 ls "s3://$BACKUP_BUCKET/" | sort | tail -n 1 | awk '{print $4}' | sed 's/\.gz//')"
    printf 'Latest database backup is "%s.gz"\n' "$LATEST_DUMP" >&2
    aws s3 cp --no-progress "s3://$BACKUP_BUCKET/$LATEST_DUMP.gz" - | gunzip
}

function _importDataDump() {
    printf 'Importing dump into "%s"\n' "$POSTGRES_HOST" >&2
    PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -U "$POSTGRES_USERNAME" "$POSTGRES_DATABASE" < "$(_getLatestDumpSql)"
}

function _syncS3Bucket() {
    printf 'Syncing S3 bucket "s3://%s/" to "s3://%s/"\n' "$FROM_BUCKET" "$TO_BUCKET" >&2
    aws s3 sync --no-progress ${DELETE:+--delete} "s3://$FROM_BUCKET/" "s3://$TO_BUCKET/"
}

function _main() {
    IFS=$'\n\t'
    set -euo pipefail

    if [[ -n "${BACKUP_BUCKET:-}" && -n "${POSTGRES_HOST:-}" && -n "${POSTGRES_USERNAME:-}" && -n "${POSTGRES_DATABASE:-}" && -n "${POSTGRES_PASSWORD:-}" ]]; then
        _importDataDump
    else
        printf 'Not all variables are set for database import.\n'
    fi

    if [[ -n "${FROM_BUCKET:-}" && -n "${TO_BUCKET:-}" ]]; then
        _syncS3Bucket
    else
        printf 'Not all variables are set for S3 sync.\n'
    fi
}

if [[ "$0" = "${BASH_SOURCE[0]}" ]]; then
    _main "$@"
fi
